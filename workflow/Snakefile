#
# Genomes in /data/johlee/cross_mammal_xci/genomes
# Data in /data/johlee/cross_mammal_xci/temp/sra
# #  snakemake --jobs 20 --cluster "qsub -N xskew1 -pe threads {threads} -wd ~/work/xskew1 -l m_mem_free={resources.mem_mb}M 


import os
import sys
import logging

gitpath=os.path.expanduser("~/git/xskew")
sys.path.append(gitpath)

species='Homo_sapiens'
genomedir = os.path.expanduser(f'~/data/cross_mammal_xci/genomes/{species}')
datadir = os.path.expanduser(f'~/data/cross_mammal_xci/temp/sra/{species}')
homedir = os.path.expanduser("~/")
wdir = f"{homedir}work/xskew1"
chr="X"


from xskew.tools import *
setup_logging(logging.DEBUG)

logging.debug('in snakefile...')

(SAMPLE,) = glob_wildcards(datadir + "/{sample}.sra")

logging.debug(f"HOME={homedir} WORKDIR={wdir} CHR={chr}")
logging.debug(f"SAMPLE={SAMPLE}")

# Needed to avoid matching anything past the '.', e.g. XYZ.wasp.<sufficx> 
wildcard_constraints:
    sample="\w+"


rule all:
    input:
        # testing. 
        end1 = expand(wdir +  "/{sample}_1.fastq", sample=SAMPLE ),
        end2 = expand(wdir +  "/{sample}_2.fastq", sample=SAMPLE ),
        
        # from genome generation
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        
        # from STAR
        abam = expand(wdir + "/{sample}.Aligned.out.bam", sample=SAMPLE ),
        
        # from SAMTOOLS 
        sbam = expand(wdir + "/{sample}.Aligned.sortedByCoord.out.bam", sample=SAMPLE ),
        xbam = expand(wdir + "/{sample}.X.bam", sample=SAMPLE ),
        xfiltbam = expand(wdir + "/{sample}.X.filt.bam", sample=SAMPLE ),

        # from gatk
        rgbam = expand(wdir + "/{sample}." + chr + ".rg.bam", sample=SAMPLE),
        sfbam = expand(wdir + "/{sample}." + chr + ".split.filtered.bam", sample=SAMPLE),
        xfvcf = expand(wdir + "/{sample}." + chr + ".filtered.vcf", sample=SAMPLE),
        sfvcf = expand(wdir + "/{sample}." + chr + ".snps_filtered.vcf",  sample=SAMPLE ),
        
        # from STAR wasp
        wabam= expand(wdir + "/{sample}.wasp.Aligned.out.bam",  sample=SAMPLE), 
        wlog = expand(wdir + "/{sample}.wasp.Log.out", sample=SAMPLE ),        
        wflog= expand(wdir +"/{sample}.wasp.Log.final.out", sample=SAMPLE),
        wrpg=  expand(wdir +"/{sample}.wasp.ReadsPerGene.out.tab",    sample=SAMPLE),        

        # from GATK2
        wsfbam = expand(wdir + "/{sample}.wasp." + chr + ".split.filtered.bam",  sample=SAMPLE), 
        wsvcf =  expand(wdir + "/{sample}.wasp." + chr + ".snps.vcf", sample=SAMPLE), 
        wsfvcf = expand(wdir + "/{sample}.wasp." + chr + ".snps_filtered.vcf", sample=SAMPLE), 
        wxfvcf = expand(wdir + "/{sample}.wasp." + chr + ".filtered.vcf", sample=SAMPLE), 
        wrgbam = expand(wdir + "/{sample}.wasp." + chr + ".rg.bam", sample=SAMPLE), 
        wddbam = expand(wdir + "/{sample}.wasp." + chr + ".dedupped.bam", sample=SAMPLE), 
        wmetrics = expand(wdir + "/{sample}.wasp." + chr + ".output.metrics", sample=SAMPLE), 

        # from igvtools
        wwig =   expand(wdir + "/{sample}.wasp." + chr + ".split.filtered.wig", sample=SAMPLE )


rule build_genome_idx:
    """
        STAR --runThreadN 16 
             --runMode genomeGenerate 
             --genomeDir ~/data/cross_mammal_xci/genomes/Homo_sapiens
             --genomeFastaFiles ~/data/cross_mammal_xci/genomes/Homo_sapiens/genome.fa
             --sjdbGTFfile ~/data/cross_mammal_xci/genomes/Homo_sapiens/annotation.gtf  
            [ --sjdOverhang 100 ]
        
        samtools faidx genome.fa
        samtools dict genome.fa -o genome.dict
        
        
    """    
    input:
        gfa = genomedir + "/genome.fa",
        gtf = genomedir + "/annotation.gtf",
        arpt = genomedir + "/assembly_report.txt"
        
    output:
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        xreg = genomedir + ""
    
    params:
        gdir= genomedir,
        chrnum=f"{chr}",
    
    resources:
        mem_mb=2048
    threads: 24
    
    run:
        star_genome(genomedir=params.gdir, 
                    nthreads=f"{threads}", 
                    gtffile=input.gtf, 
                    infile=input.gfa )
        samtools_faidx(infile=input.gfa, 
                       outfile=output.gfai)
        samtools_dict(infile=input.gfa, 
                      outfile=output.gdict)
        make_chr_label(reportfile=input.arpt,
                       outfile=output.xreg,
                       chr=params.chrnum)



rule dump_fastq:
    input:
        sra = datadir + "/{sample}.sra"
    output:
        end1= wdir + "/{sample}_1.fastq",    
        end2= wdir + "/{sample}_2.fastq"    
    resources:
        mem_mb=2048
    threads: 6

    run:
        fasterq_dump( infile=input.sra, 
                      outdir=wdir, 
                      nthreads=f"{threads}", 
                      tempdir ="./")
        
        
rule star_nowasp:
    input:
        end1= wdir + "/{sample}_1.fastq",   
        end2= wdir + "/{sample}_2.fastq",
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        
    output:     
        abam= wdir + "/{sample}.Aligned.out.bam",
        rpg= wdir + "/{sample}.ReadsPerGene.out.tab",
        sjtab= wdir + "/{sample}.SJ.out.tab",
        log= wdir + "/{sample}.Log.out",        
        plog= wdir + "/{sample}.Log.progress.out",
        flog= wdir + "/{sample}.Log.final.out",
    params:        
        tmpdir = wdir + "/{sample}_starout",
        wdir = wdir + "/",
        gdir= genomedir,
        outprefix = wdir + "/{sample}."     
    resources:
        mem_mb=3072
    threads: 16
    
    run:
        star_nowasp( end1=input.end1, 
                     end2=input.end2, 
                     outprefix=params.outprefix,
                     nthreads=f"{threads}", 
                     genomedir=params.gdir)

rule samtools1: 
    input:
        abam = wdir + "/{sample}.Aligned.out.bam"    
    output:
        sbam = wdir + "/{sample}.Aligned.sortedByCoord.out.bam",
        sbai = wdir + "/{sample}.Aligned.sortedByCoord.out.bam.bai"
    resources:
        mem_mb=3072
    threads: 20
    
    run:
        samtools_sort(infile=input.abam, 
                      outfile=output.sbam, 
                      memory=resources.mem_mb, 
                      nthreads=f"{threads}")
        samtools_index(infile=output.sbam, 
                       nthreads=f"{threads}")


rule samtools2:
    input:
        bam= wdir + "/{sample}.Aligned.sortedByCoord.out.bam",
        sbai = wdir + "/{sample}.Aligned.sortedByCoord.out.bam.bai"    
    output:
        xbam= wdir + "/{sample}."+ chr +".bam",    
        xfiltbam= wdir + "/{sample}."+ chr +".filt.bam"    
    params:
        region=f"chr{chr}",
        qual = 10,
    resources:
        mem_mb=3072  
    threads: 1        

    run:
        samtools_view_region(infile=input.bam, 
                             outfile=output.xbam, 
                             region=params.region)
        samtools_view_quality(infile=output.xbam, 
                              outfile=output.xfiltbam, 
                              quality=f'{params.qual}')


rule gatk1:        
    input:
        xbam= wdir + "/{sample}."+ chr +".bam",    
        xfiltbam= wdir + "/{sample}."+ chr +".filt.bam",
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        
    output:
        rgbam = wdir + "/{sample}." + chr + ".rg.bam",
        
        ddbam = wdir + "/{sample}." + chr + ".dedupped.bam",
        ddbai = wdir + "/{sample}." + chr + ".dedupped.bai",
        metrics = wdir + "/{sample}." + chr + ".output.metrics",
        
        sfbam = wdir + "/{sample}." + chr + ".split.filtered.bam",
        sfbai = wdir + "/{sample}." + chr + ".split.filtered.bai",
        xfvcf = wdir + "/{sample}." + chr + ".filtered.vcf",
        svcf =  wdir + "/{sample}." + chr + ".snps.vcf",
        sfvcf = wdir + "/{sample}." + chr + ".snps_filtered.vcf",

    params:
        chrom = chr,
        wdir = wdir + "/",
        genome = genomedir + "/genome.fa",
        interval = f"chr{chr}",    

    resources:
        #mem_mb=46080
        mem_mb= 5760
    #threads: 1
    threads: 8
    
    run:
        gatk_arrg( infile=input.xfiltbam, outfile=output.rgbam)
        list_sample(infile=input.xfiltbam)
        gatk_md( infile=output.rgbam, outfile=output.ddbam, metrics=output.metrics)
        list_sample(infile=input.xfiltbam)
        gatk_sncr( infile=output.ddbam, outfile=output.sfbam, genome=params.genome )
        list_sample(infile=input.xfiltbam)
        gatk_htc( infile=output.sfbam, outfile=output.xfvcf, genome=params.genome, interval=params.interval)
        list_sample(infile=input.xfiltbam)        
        gatk_sv(infile=output.xfvcf, outfile=output.svcf, genome=params.genome, interval=params.interval )
        list_sample(infile=input.xfiltbam)
        gatk_vf(infile=output.svcf, outfile=output.sfvcf, genome=params.genome, interval=params.interval )      
        list_sample(infile=input.xfiltbam)

rule star_wasp:
    input:
        end1= wdir + "/{sample}_1.fastq",   
        end2= wdir + "/{sample}_2.fastq",
        sfvcf = wdir + "/{sample}." + chr + ".snps_filtered.vcf",
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        
    output:     
        wabam= wdir + "/{sample}.wasp.Aligned.out.bam",
        wrpg= wdir + "/{sample}.wasp.ReadsPerGene.out.tab",
        wsjtab= wdir + "/{sample}.wasp.SJ.out.tab",
        wlog= wdir + "/{sample}.wasp.Log.out",        
        wplog= wdir + "/{sample}.wasp.Log.progress.out",
        wflog= wdir + "/{sample}.wasp.Log.final.out",

    params:        
        tmpdir = wdir + "/{sample}_starout",
        wdir = wdir + "/",
        gdir = genomedir ,
        outprefix = wdir + "/{sample}.wasp."
    resources:
        mem_mb=3072
    threads: 16
    
    run:
        star_wasp( end1=input.end1, 
                     end2=input.end2,
                     vcf=input.sfvcf, 
                     outprefix=params.outprefix,
                     nthreads=f"{threads}", 
                     genomedir=params.gdir)


rule samtools3: 
    input:         
        wabam = wdir + "/{sample}.wasp.Aligned.out.bam"    
    output:        
        wsbam = wdir + "/{sample}.wasp.Aligned.sortedByCoord.out.bam",
        wsbai = wdir + "/{sample}.wasp.Aligned.sortedByCoord.out.bam.bai"
    resources:
        mem_mb=3072
    threads: 20
    run:
        samtools_sort(infile=input.wabam, 
                      outfile=output.wsbam, 
                      memory=resources.mem_mb, 
                      nthreads=f"{threads}")
        samtools_index(infile=output.wsbam, 
                       nthreads=f"{threads}")
        
rule samtools4:
    input:
        wbam= wdir + "/{sample}.wasp.Aligned.sortedByCoord.out.bam",
        wsbai = wdir + "/{sample}.wasp.Aligned.sortedByCoord.out.bam.bai"    
    output:
        wxbam= wdir + "/{sample}.wasp."+ chr +".bam",    
        wxfiltbam= wdir + "/{sample}.wasp."+ chr +".filt.bam"    
    params:
        region=f"chr{chr}",
        qual = 10,
        tag = 'vW:1'
    resources:
        mem_mb=3072  
    threads: 1        

    run:
        samtools_view_region(infile=input.wbam, 
                             outfile=output.wxbam, 
                             region=params.region)
        samtools_view_quality(infile=output.wxbam, 
                              outfile=output.wxfiltbam,
                              tag=params.tag, 
                              quality=f'{params.qual}')
     
rule gatk2:        
    input:
        wxbam= wdir + "/{sample}.wasp."+ chr +".bam",    
        wxfiltbam= wdir + "/{sample}.wasp."+ chr +".filt.bam",
        gdict = genomedir + "/genome.dict",
        gfai = genomedir + "/genome.fa.fai",
        gpar = genomedir + "/genomeParameters.txt",
        
    output:
        wrgbam = wdir + "/{sample}.wasp." + chr + ".rg.bam",
        wddbam = wdir + "/{sample}.wasp." + chr + ".dedupped.bam",
        wddbai = wdir + "/{sample}.wasp." + chr + ".dedupped.bai",
        wsfbam = wdir + "/{sample}.wasp." + chr + ".split.filtered.bam",
        wsfbai = wdir + "/{sample}.wasp." + chr + ".split.filtered.bai",
        wxfvcf = wdir + "/{sample}.wasp." + chr + ".filtered.vcf",
        wsvcf = wdir + "/{sample}.wasp." + chr + ".snps.vcf",
        wsfvcf = wdir + "/{sample}.wasp." + chr + ".snps_filtered.vcf",
        wmetrics = wdir + "/{sample}.wasp." + chr + ".output.metrics",
    
    params:
        chrom = chr,
        wdir = wdir + "/",
        genome = genomedir + "/genome.fa",
        interval = f"chr{chr}"    
    resources:
        #mem_mb=46080
        mem_mb= 5760
    #threads: 1
    threads: 8
    
    run:
        gatk_arrg( infile=input.wxfiltbam, outfile=output.wrgbam)
        list_sample(infile=input.wxfiltbam)
        gatk_md( infile=output.wrgbam, outfile=output.wddbam, metrics=output.wmetrics)
        list_sample(infile=input.wxfiltbam)
        gatk_sncr( infile=output.wddbam, outfile=output.wsfbam, genome=params.genome )
        list_sample(infile=input.wxfiltbam)
        gatk_htc( infile=output.wsfbam, outfile=output.wxfvcf, genome=params.genome, interval=params.interval)
        list_sample(infile=input.wxfiltbam)
        gatk_sv( infile=output.wxfvcf, outfile=output.wsvcf, genome=params.genome, interval=params.interval )
        list_sample(infile=input.wxfiltbam)
        gatk_vf( infile=output.wsvcf, outfile=output.wsfvcf, genome=params.genome, interval=params.interval )
        list_sample(infile=input.wxfiltbam)      


rule igvtools7:    
    input:
        wsfbam= wdir + "/{sample}.wasp." + chr + ".split.filtered.bam",

    output:
        wwig= wdir + "/{sample}.wasp." + chr + ".split.filtered.wig", 
        
    resources:
        mem_mb=12288
    threads: 1
    
    params:
        wdir = wdir + "/",
        chrom=chr,      
      
    run:
        igvtools_count(input.wsfbam, output.wwig)      
      
      
      
      
        